<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorMessage" xml:space="preserve">
    <value>Bad entry, please re-enter the value</value>
  </data>
  <data name="Insert" xml:space="preserve">
    <value>Insert</value>
  </data>
  <data name="InsertCancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="InsertDone" xml:space="preserve">
    <value>Done! Listing Added</value>
  </data>
  <data name="InsertFieldBathroomCount" xml:space="preserve">
    <value>Enter Number of Bathrooms</value>
    <comment>6</comment>
  </data>
  <data name="InsertFieldBedroomCount" xml:space="preserve">
    <value>Enter Number of Bedrooms</value>
    <comment>7</comment>
  </data>
  <data name="InsertFieldCategoryType" xml:space="preserve">
    <value>Select category details</value>
    <comment>1</comment>
  </data>
  <data name="InsertFieldCountryCity" xml:space="preserve">
    <value>Select Location details</value>
    <comment>11</comment>
  </data>
  <data name="InsertFieldFloorCount" xml:space="preserve">
    <value>Floor Count</value>
    <comment>2</comment>
  </data>
  <data name="InsertFieldFloorLevelCount" xml:space="preserve">
    <value>Property's Floor</value>
    <comment>3</comment>
  </data>
  <data name="InsertFieldGardenGarageChoice" xml:space="preserve">
    <value>Property Exterior Details</value>
    <comment>9</comment>
  </data>
  <data name="InsertFieldOtherDetailsText" xml:space="preserve">
    <value>Extra details for the property</value>
    <comment>10</comment>
  </data>
  <data name="InsertFieldPhotoSelection" xml:space="preserve">
    <value>Upload Property Photo</value>
    <comment>12</comment>
  </data>
  <data name="InsertFieldPropertySize" xml:space="preserve">
    <value>Property size</value>
    <comment>4</comment>
  </data>
  <data name="InsertFieldSaleRentPriceCount" xml:space="preserve">
    <value>Sale /Rent Price</value>
    <comment>5</comment>
  </data>
  <data name="InsertFieldZipCodeText" xml:space="preserve">
    <value>Property's area zip code</value>
    <comment>8</comment>
  </data>
  <data name="InsertFormAddressText" xml:space="preserve">
    <value>Enter the property address </value>
  </data>
  <data name="InsertFormAddressTextDescription" xml:space="preserve">
    <value>Enter the property's Address</value>
  </data>
  <data name="InsertFormBathroomCountDescription" xml:space="preserve">
    <value>Enter the property's number of bathrooms</value>
  </data>
  <data name="InsertFormBedroomCountDescription" xml:space="preserve">
    <value>Enter the property's number of bedrooms</value>
  </data>
  <data name="InsertFormConfirmLocation" xml:space="preserve">
    <value>Is this Location Correct?</value>
  </data>
  <data name="InsertFormCountryNext" xml:space="preserve">
    <value>Next &gt;&gt;</value>
  </data>
  <data name="InsertFormFloorCountDescription" xml:space="preserve">
    <value>Enter the number of floors for the property</value>
  </data>
  <data name="InsertFormFloorLevelCountDescription" xml:space="preserve">
    <value>In which floor is the property( -1 is basment , 2 is secnd floor)</value>
  </data>
  <data name="InsertFormHeader" xml:space="preserve">
    <value>Select an option to add a property</value>
  </data>
  <data name="InsertFormLocationLatLng" xml:space="preserve">
    <value>Select the property Location</value>
  </data>
  <data name="InsertFormLocationLatLngDescription" xml:space="preserve">
    <value>Enter the address of the property to show avalable locations</value>
  </data>
  <data name="InsertFormOtherDetailsTextDescription" xml:space="preserve">
    <value>Enter the details about the property ( features)</value>
  </data>
  <data name="InsertFormPropertyPhotoDescription" xml:space="preserve">
    <value>Upload the Photos of the Property (4 Max)</value>
  </data>
  <data name="InsertFormPropertySizeDescription" xml:space="preserve">
    <value>Enter the Property Size in square meters</value>
  </data>
  <data name="InsertFormRentPriceCountDescription" xml:space="preserve">
    <value>What is the rent Price?</value>
  </data>
  <data name="InsertFormSalePriceCountDescription" xml:space="preserve">
    <value>What is the sale Price?</value>
  </data>
  <data name="InsertFormZipCodeTextDescription" xml:space="preserve">
    <value>What is the Zip Code?</value>
  </data>
  <data name="InsertGarageSelection" xml:space="preserve">
    <value>Does the Property come with a Garage?</value>
  </data>
  <data name="InsertGardenSelection" xml:space="preserve">
    <value>Does the Property come with a Garden?</value>
  </data>
  <data name="InsertPhoneNumber" xml:space="preserve">
    <value>Please Enter your Phone Number</value>
  </data>
  <data name="InsertPhoneNumberError" xml:space="preserve">
    <value>Not A valid Phone Enter Again</value>
  </data>
  <data name="InsertPhotosErrorMessage" xml:space="preserve">
    <value>Invalid Files Please Send Again</value>
  </data>
</root>