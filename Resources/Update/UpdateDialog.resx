<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="UpdateFieldCategoryType" xml:space="preserve">
    <value>Select category details</value>
  </data>
  <data name="UpdateFieldCountryCity" xml:space="preserve">
    <value>Select Country details</value>
  </data>
  <data name="UpdateFieldFloorCount" xml:space="preserve">
    <value> Floor Count</value>
  </data>
  <data name="UpdateFieldFloorLevelCount" xml:space="preserve">
    <value>what is the property's Floor?</value>
  </data>
  <data name="UpdateFieldGardenGarageChoice" xml:space="preserve">
    <value>Property Exterior Details</value>
  </data>
  <data name="UpdateFieldLocationLatLng" xml:space="preserve">
    <value>Select the property Location</value>
  </data>
  <data name="UpdateFieldOtherDetailsText" xml:space="preserve">
    <value>Extra details for the property</value>
  </data>
  <data name="UpdateFieldPhotoSelection" xml:space="preserve">
    <value>Upload Property Photo</value>
  </data>
  <data name="UpdateFieldPropertySize" xml:space="preserve">
    <value>Property size</value>
  </data>
  <data name="UpdateFieldSaleRentPriceCount" xml:space="preserve">
    <value>Sale /Rent Price</value>
  </data>
  <data name="UpdateFieldZipCodeText" xml:space="preserve">
    <value>what is Property's Area Zip Code?</value>
  </data>
  <data name="UpdateFormAddressTextDescription" xml:space="preserve">
    <value>what is the Property's Address?</value>
  </data>
  <data name="UpdateFormBathroomCountDescription" xml:space="preserve">
    <value>what is the number of its  bathrooms</value>
  </data>
  <data name="UpdateFormBedroomCountDescription" xml:space="preserve">
    <value>what is the number of its bedrooms?</value>
  </data>
  <data name="UpdateFormCountryNext" xml:space="preserve">
    <value>Next &gt;&gt;</value>
  </data>
  <data name="UpdateFormFloorCountDescription" xml:space="preserve">
    <value>How many floors has the property?</value>
  </data>
  <data name="UpdateFormFloorLevelCountDescription" xml:space="preserve">
    <value>In which floor is the property?( -1 is basment , 2 is secnd floor)</value>
  </data>
  <data name="UpdateFormHeader" xml:space="preserve">
    <value>Select an option to add a property</value>
  </data>
  <data name="UpdateFormLocationLatLngDescription" xml:space="preserve">
    <value>Enter the address of the property to show available locations</value>
  </data>
  <data name="UpdateFormOtherDetailsTextDescription" xml:space="preserve">
    <value>Enter the details about the property ( features)</value>
  </data>
  <data name="UpdateFormPropertyPhotoDescription" xml:space="preserve">
    <value>Upload the Photos of the Property (4 Max)</value>
  </data>
  <data name="UpdateFormPropertySizeDescription" xml:space="preserve">
    <value>What is the property Size in square meters</value>
  </data>
  <data name="UpdateFormRentPriceCountDescription" xml:space="preserve">
    <value>What is the rent Price?</value>
  </data>
  <data name="UpdateFormSalePriceCountDescription" xml:space="preserve">
    <value>What is the sale Price?</value>
  </data>
  <data name="UpdateFormZipCodeTextDescription" xml:space="preserve">
    <value>What is the Zip Code?</value>
  </data>
  <data name="Update" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="UpdateFieldAddressText" xml:space="preserve">
    <value>what is the property address ?</value>
  </data>
  <data name="UpdateFieldBathroomCount" xml:space="preserve">
    <value>what is number of Bathrooms?</value>
  </data>
  <data name="UpdateFieldBedroomCount" xml:space="preserve">
    <value>what is number of Bedrooms?</value>
  </data>
  <data name="UpdateSelectProperty" xml:space="preserve">
    <value>Update This Property</value>
  </data>
  <data name="UpdateCancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="UpdateDoneConfirm" xml:space="preserve">
    <value>Done or Change Other?</value>
  </data>
  <data name="UpdatePhotosErrorMessage" xml:space="preserve">
    <value>Error Please Upload Images Only</value>
  </data>
</root>